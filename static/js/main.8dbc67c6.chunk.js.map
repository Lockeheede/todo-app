{"version":3,"sources":["ToDo.js","ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["ToDo","todo","toggleTodos","type","checked","complete","onChange","id","name","ToDoList","todos","map","LOCAL_STORAGE_KEY","App","useState","setTodos","todoNameRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","style","textAlign","padding","backgroundImage","newTodos","find","ref","onClick","e","current","value","prevTodos","uuid","filter","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAEe,SAASA,EAAT,GAAsC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAInC,OACE,8BACE,kCACE,uBACEC,KAAK,WACLC,QAASH,EAAKI,SACdC,SATR,WACEJ,EAAYD,EAAKM,OAUZN,EAAKO,UCXC,SAASC,EAAT,GAA2C,IAAvBC,EAAsB,EAAtBA,MAAOR,EAAe,EAAfA,YACtC,OACQQ,EAAMC,KAAI,SAAAV,GACN,OAAO,cAAC,EAAD,CAAoBC,YAAaA,EAAaD,KAAMA,GAAzCA,EAAKM,O,YCFjCK,EAAoB,gBAyDXC,MAvDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOJ,EAAP,KAAcK,EAAd,KACMC,EAAcC,mBAkCpB,OA9BAC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQX,IAChDO,GAAaJ,EAASI,KACzB,IAEHD,qBAAU,WACRI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUf,MACtD,CAACA,IAwBF,sBACEgB,MAAO,CACLC,UAAW,SACXC,QAAS,QACTC,gBAAiB,gCAJrB,UAOE,4CACA,cAACpB,EAAD,CAAUC,MAAOA,EAAOR,YA9B5B,SAAqBK,GACnB,IAAMuB,EAAQ,YAAOpB,GACfT,EAAO6B,EAASC,MAAK,SAAC9B,GAAD,OAAUA,EAAKM,KAAOA,KACjDN,EAAKI,UAAYJ,EAAKI,SACtBU,EAASe,MA2BP,uBAAOE,IAAKhB,EAAab,KAAK,SAC9B,uBACA,wBAAQ8B,QA1BZ,SAAuBC,GACrB,IAAM1B,EAAOQ,EAAYmB,QAAQC,MACpB,MAAT5B,IACJO,GAAS,SAACsB,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAE9B,GAAI+B,MAAW9B,KAAMA,EAAMH,UAAU,QAE/DW,EAAYmB,QAAQC,MAAQ,OAoB1B,sBACA,wBAAQH,QAlBZ,WACE,IAAMH,EAAWpB,EAAM6B,QAAO,SAACtC,GAAD,OAAWA,EAAKI,YAC9CU,EAASe,IAgBP,wBACA,gCAAMpB,EAAM6B,QAAO,SAACtC,GAAD,OAAWA,EAAKI,YAAUmC,OAA7C,qBC5CSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8dbc67c6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function ToDo({ todo, toggleTodos }) {\r\n  function handleTodoClick() {\r\n    toggleTodos(todo.id);\r\n  }\r\n  return (\r\n    <div>\r\n      <label>\r\n        <input\r\n          type='checkbox'\r\n          checked={todo.complete}\r\n          onChange={handleTodoClick}\r\n        />\r\n        {todo.name}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Todo from './ToDo'\r\n\r\nexport default function ToDoList({ todos, toggleTodos }) {\r\n    return (\r\n            todos.map(todo => {\r\n                return <Todo key={todo.id} toggleTodos={toggleTodos} todo={todo} />\r\n            })\r\n)\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport * as uuid from \"uuid\";\n\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const todoNameRef = useRef();\n\n  //store, save, and load a todo item\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function toggleTodos(id) {\n    const newTodos = [...todos];\n    const todo = newTodos.find((todo) => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(newTodos);\n  }\n\n  function handleAddTodo(e) {\n    const name = todoNameRef.current.value;\n    if (name === \" \") return;\n    setTodos((prevTodos) => {\n      return [...prevTodos, { id: uuid.v4(), name: name, complete: false }];\n    });\n    todoNameRef.current.value = null;\n  }\n\n  function handleClearTodo() {\n    const newTodos = todos.filter((todo) => !todo.complete);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        padding: \"250px\",\n        backgroundImage: \"linear-gradient(white, blue)\",\n      }}\n    >\n      <h2>TO DO LIST</h2>\n      <ToDoList todos={todos} toggleTodos={toggleTodos} />\n      <input ref={todoNameRef} type='text'></input>\n      <br />\n      <button onClick={handleAddTodo}>Add Todo</button>\n      <button onClick={handleClearTodo}>Clear Todo</button>\n      <div>{todos.filter((todo) => !todo.complete).length} left to do</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}